@global.var.d = common global double 0.000000e+00, align 4
declare i32 @atoi(i8*)
declare i32 @printf(i8*, ...)

define i32 @main(i32 %argc, i8** %argv) {
	call void @function.declaration.v.main.s.(i32 %argc, i8** %argv)
	ret i32 0
}

define double @function.declaration.d.test.d.(double %n_aux) {
	%n = alloca double, align 8
	store double %n_aux, double* %n, align 8
	%1 = load double, double* %n, align 8
	ret double %1
	ret double 0.000000e+00
}
define void @function.declaration.v.main.s.(i32 %argc, i8** %argv) {
	%argc_aux = alloca i32, align 4
	%argv_aux = alloca i8**, align 8
	store i32 %argc, i32* %argc_aux, align 4
	store i8** %argv, i8*** %argv_aux, align 8
	%1 = add i32 0, 4
	%2 = sitofp i32 %1 to double
	%3 = call double @function.declaration.d.test.d.(double %2)
	%4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.global.strlit.1, i32 0, i32 0), double %3)
	%5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.global.strlit.2, i32 0, i32 0))
	%6 = load double, double* @global.var.d, align 8
	%7 = add i32 0, 2
	%convertion.1 = sitofp i32 %7 to double
	store double %convertion.1, double* @global.var.d, align 8
	%8 = load double, double* @global.var.d, align 8
	%9 = load double, double* @global.var.d, align 8
	%10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.global.strlit.3, i32 0, i32 0), double %9)
	%11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.global.strlit.4, i32 0, i32 0))
	ret void
}

@.global.strlit.1 = private unnamed_addr constant [7 x i8] c"%.16E\0A\00", align 1
@.global.strlit.2 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.global.strlit.3 = private unnamed_addr constant [7 x i8] c"%.16E\0A\00", align 1
@.global.strlit.4 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
